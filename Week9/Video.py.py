# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z2tnu8swT5t4zlBPLZ57pHfu3TtrYSvC
"""

# üå™Ô∏è Hurricane Irma ‚Äì Stylized Synthetic Satellite Simulation (Educational Visualization)
# 20-second top-down satellite-style video for presentations
# -----------------------------------------------------------

!pip install matplotlib numpy pillow tqdm --quiet

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from tqdm import tqdm
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas

frames = 480      # 24 fps √ó 20 s
fps = 24

def perlin_noise(shape, scale=100, seed=None):
    """Create smooth noise to imitate satellite cloud texture."""
    if seed is not None:
        np.random.seed(seed)
    noise = np.random.rand(*shape)
    for _ in range(3):
        noise = (
            noise
            + np.roll(noise, 1, axis=0)
            + np.roll(noise, -1, axis=0)
            + np.roll(noise, 1, axis=1)
            + np.roll(noise, -1, axis=1)
        ) / 5
    noise = (noise - noise.min()) / (noise.max() - noise.min())
    return noise

def make_frame(i):
    fig, ax = plt.subplots(figsize=(8, 8), dpi=100)
    canvas = FigureCanvas(fig)
    ax.set_xlim(-400, 400)
    ax.set_ylim(-400, 400)
    ax.axis("off")
    ax.set_facecolor("#01203a")  # ocean color

    # Florida outline (approximation)
    fx = [200, 220, 200, 160, 120, 100, 90, 110, 130, 160, 200]
    fy = [300, 240, 180, 120, 80, 40, 0, -40, -80, -120, -160]
    ax.plot(fx, fy, color="#6fffb0", linewidth=2)

    # Storm eye position
    cx = -250 + (i / frames) * 400
    cy = 0
    ax.scatter(cx, cy, s=250, color="yellow", alpha=0.9, zorder=5)

    # Synthetic cloud texture
    grid_x, grid_y = np.meshgrid(np.linspace(-400, 400, 400), np.linspace(-400, 400, 400))
    r = np.sqrt((grid_x - cx)**2 + (grid_y - cy)**2)
    swirl = np.sin(0.08 * r - 0.15 * i) * 0.5 + 0.5
    clouds = perlin_noise(swirl.shape, seed=int(i/10))
    texture = np.clip(swirl * clouds, 0, 1)

    ax.imshow(texture, cmap="Greys", origin="lower", extent=[-400, 400, -400, 400],
              alpha=0.9, zorder=0)

    plt.text(-370, 360, "Hurricane Irma ‚Äì 3D Atmospheric Simulation (Educational Visualization)",
             color="white", fontsize=10, fontweight="bold")

    canvas.draw()
    buf = np.asarray(canvas.buffer_rgba())
    plt.close(fig)
    return buf[:, :, :3]

# Generate frames
frames_array = []
for i in tqdm(range(frames), desc="Generating frames"):
    frames_array.append(make_frame(i))

# Save as video
fig = plt.figure()
writer = animation.FFMpegWriter(fps=fps)
with writer.saving(fig, "irma_satellite_simulation.mp4", dpi=100):
    for frame in tqdm(frames_array, desc="Writing video"):
        plt.imshow(frame)
        plt.axis("off")
        writer.grab_frame()
        plt.clf()
plt.close()

print("‚úÖ Video saved as irma_satellite_simulation.mp4 ‚Äì ready for presentation!")